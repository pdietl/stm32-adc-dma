
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_DAC_EXT_H
#define Z_INCLUDE_SYSCALLS_DAC_EXT_H


#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic push
#endif

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_dac_ext_channel_setup(const struct device * dev, const struct dac_ext_channel_cfg * channel_cfg);
static inline int dac_ext_channel_setup(const struct device * dev, const struct dac_ext_channel_cfg * channel_cfg)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&channel_cfg, K_SYSCALL_DAC_EXT_CHANNEL_SETUP);
	}
#endif
	compiler_barrier();
	return z_impl_dac_ext_channel_setup(dev, channel_cfg);
}


extern int z_impl_dac_ext_write_value(const struct device * dev, uint8_t channel, uint32_t value);
static inline int dac_ext_write_value(const struct device * dev, uint8_t channel, uint32_t value)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&channel, *(uintptr_t *)&value, K_SYSCALL_DAC_EXT_WRITE_VALUE);
	}
#endif
	compiler_barrier();
	return z_impl_dac_ext_write_value(dev, channel, value);
}


extern int z_impl_dac_ext_callback_set(const struct device * dev, dac_callback_t callback, void * user_data);
static inline int dac_ext_callback_set(const struct device * dev, dac_callback_t callback, void * user_data)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&callback, *(uintptr_t *)&user_data, K_SYSCALL_DAC_EXT_CALLBACK_SET);
	}
#endif
	compiler_barrier();
	return z_impl_dac_ext_callback_set(dev, callback, user_data);
}


extern int z_impl_dac_ext_start_continuous(const struct device * dev, uint8_t channel);
static inline int dac_ext_start_continuous(const struct device * dev, uint8_t channel)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&channel, K_SYSCALL_DAC_EXT_START_CONTINUOUS);
	}
#endif
	compiler_barrier();
	return z_impl_dac_ext_start_continuous(dev, channel);
}


extern int z_impl_dac_ext_fill_buffer(const struct device * dev, uint8_t channel, uint8_t * data, size_t size);
static inline int dac_ext_fill_buffer(const struct device * dev, uint8_t channel, uint8_t * data, size_t size)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&channel, *(uintptr_t *)&data, *(uintptr_t *)&size, K_SYSCALL_DAC_EXT_FILL_BUFFER);
	}
#endif
	compiler_barrier();
	return z_impl_dac_ext_fill_buffer(dev, channel, data, size);
}


#ifdef __cplusplus
}
#endif

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic pop
#endif

#endif
#endif /* include guard */
